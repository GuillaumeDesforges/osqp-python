language: C

os:
  - linux
  - osx
osx_image: xcode8.3

sudo: required
services:
  - docker

env:
  global:
    # ANACONDA_TOKEN
    - secure: "doZox+m92r02SdGWU1+Oy7LOc9c/4fRqqoffDDcDC7yAMZZPfx1PIVxxZTyIo8tzLzKQn3VOjIAhC/0HfisI51oKbBbIaJMpLnENgAgCOM43Zg1BLl1rgBFPLabSKWuGgHYZHwUAexLlaiPH5bjUfkCBcLN9MSK8n6yo1kHoY5F0jXLu0Rl5IN4CzwZPLJLY59oVollpC1kYQLntDvzvtvCqXzmxIfQ7fTGCIFGur6ZyBQVisOmOMAAYxnNQ4D3qu0A2bSV6o64cXRl2Uosek8xcscuZjhAlXVwONJHQLSPNLQt9wfRvu7qiZTW0oS0PmYtcy0XcNVh4KuwTjYJGP5f0Knh0LAmnUN6L944XsMShbrbXKIff3T2MPG9Nvi6rtJLE/EmLmyuvY8PbPskHOt6yIH9UhrWAuRQBVjnZIAAE3WSHuf9/abutm7ML5y23vbFnu5VG2KJjCvxKAFm3fbedS4VbkbYKACGFo+f4PbDXbJXMalM0E78j4GQMdSgapRyAbSKLInBIOwNO8+mlktyLBsbphnWJBdXSdU6W31ExObLktg8ApZqrT5U/OvJuXWOWJOYsYTI3j2mx12N4rhA9sT+EWfJklv+TgzUqNQA+feMkK2s97sz3dmzPhJ3xno7y77FzQNBs83x9WHAXDdrPxFbcXNGiep/oRiK6s9w="
    # BINTRAY_API_KEY
    - secure: "OCZgmIHJT0D34ncR052qReGXrs52PXNe2RiPVk5SUZwgyCXcaQCyd9kcYQDkJwzY4Ere+ePTN1wJtBwT0maKJ6vSCQ3vDfqrJunWD6anACUG2FsRoPpYoxTK+SfPzJqyCnirWR1q2jS558woHyfTAjpxKZ33DiBkuyjgiTdL4caCtZktM+2L2Yl9HB+NCtnO64DTPjaPxXKHWBYRc9FACnknBKrEJtq4gFNpG5y0vJt2o/mvzMR50mQqbhTIof1kBf5B19ADhQjdcYJWndvdSI9XmMYpxh+36wWZIMfxlbGwNB0HLt0S0HB9m1dWv0QTPbBjHg89Rg5pLQzsCj+aJw3vj7nF9Fs1QdLOcspFV7AIH22PeTJ/qhlne7oI93oxr/RkpLUKXiPVKMKhd8qjZHFjltS6jgo2ePR+3TxPutzin41L7LjOkObX9+Z1JLkY6E3trEWf5uRAw0RSqnWu/wM1EdjQHshWuZpW4z4looRj45ROqjPwaUag9Swsa4xBvfi7J8YFu9BVCHIaiNY0DE16yh00cUEcv8OQQTI+tS0pODjT/bky4SPeVIzJeEirCyTtsS/E5c8oF28fUb8vI3/RGBHxAiHuDumlgSvFkEDxheTCSeJi3AsVNRzS3Lnb253YecQ2SexIh55+H3cSExbDn15TOzeqmHOVibCTR6k="
    # For wheels building
    - CIBW_TEST_REQUIRES='pytest'
    - CIBW_BEFORE_BUILD='pip install cmake'
    - CIBW_TEST_REQUIRES='pytest'
    - CIBW_TEST_COMMAND='python -m pytest {project}/tests'
    - CIBW_SKIP="cp27-* cp33-* cp34-*"

  matrix:
    # Python versions to try with conda
    - PYTHON_VERSION=3.5
    - PYTHON_VERSION=3.6
    - PYTHON_VERSION=3.7

install:
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
        wget http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    else
        wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - source $HOME/miniconda/bin/activate
  - conda config --set always_yes yes --set changeps1 no --set auto_update_conda no
  - conda create -n testenv python=$PYTHON_VERSION anaconda
  - conda activate testenv
  - conda install conda conda-verify conda-build anaconda-client
  - conda info -a
  # Add MKL shared libraries (for MKL pardiso) to the path
  - |
    MKL_PARDISO_LIB_DIR=`python -c 'import numpy.distutils.system_info as sysinfo; print(sysinfo.get_info("mkl")["library_dirs"][0])'`
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
        export LD_LIBRARY_PATH=${MKL_PARDISO_LIB_DIR}:${LD_LIBRARY_PATH}
    else if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export DYLD_LIBRARY_PATH=${MKL_PARDISO_LIB_DIR}:${DYLD_LIBRARY_PATH}
    fi
    fi

script:
  # Build and test conda
  - conda build conda-recipe --python=$PYTHON_VERSION

  # Get OSQP version (for later packaging)
  - conda install -c ${CONDA_PREFIX}/conda-bld/ osqp
  - export OSQP_VERSION=`python -c 'import osqp; m = osqp.OSQP(); print(m.version())'`

  # Build and test pip manylinux wheels (only one version of python (it uses multiple versions internally))
  - |
    if [ "$PYTHON_VERSION" == "3.7" ]; then
        pip install cibuildwheel==0.11.1
        cibuildwheel --output-dir wheelhouse
    fi
        

deploy:
  # Anaconda
  - provider: script
    script:
      - |
        # Different anaconda label for dev/release versions
        if [[ ${OSQP_VERSION} == *"dev"* ]]; then
            export ANACONDA_LABEL="dev";
        else
            export ANACONDA_LABEL="main";
        fi
        anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda/conda-bld/**/*.tar.bz2 --user oxfordcontrol --force -l ${ANACONDA_LABEL}
    skip_cleanup: true
    on:
      all_branches: true
    #   tags: true

  # Pypi wheels
  - provider: script
    script:
     # Upload to bintray
      - |
        if [ -d "${TRAVIS_BUILD_DIR}/wheelhouse/" ]; then
            for f in ${TRAVIS_BUILD_DIR}/wheelhouse/*.whl; do
              curl -T $f -ubstellato:$BINTRAY_API_KEY -H "X-Bintray-Package:osqp-wheels" -H "X-Bintray-Version:${OSQP_VERSION}" -H "X-Bintray-Override:1" https://api.bintray.com/content/bstellato/generic/osqp-wheels/${OSQP_VERSION}/;
            done
            curl -X POST -ubstellato:$BINTRAY_API_KEY https://api.bintray.com/content/bstellato/generic/osqp-wheels/${OSQP_VERSION}/publish
        fi
    skip_cleanup: true
    on:
      all_branches: true
    #   tags: true

  # Source distribution
  - provider: script
    script:
      # Create and upload source distribution
      - |
        if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$PYTHON_VERSION" == "3.7" ]; then
          cd ${TRAVIS_BUILD_DIR};
          rm -rf dist/;
          python setup.py sdist;
          for f in dist/*; do
            curl -T $f -ubstellato:$BINTRAY_API_KEY -H "X-Bintray-Package:osqp-wheels" -H "X-Bintray-Version:${OSQP_VERSION}" -H "X-Bintray-Override:1" https://api.bintray.com/content/bstellato/generic/osqp-wheels/${OSQP_VERSION}/;
          done
        fi
    skip_cleanup: true
    on:
      all_branches: true

